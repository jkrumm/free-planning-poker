import Head from "next/head";
import React from "react";
import dynamic from "next/dynamic";
import Link from "next/link";
import { useWsStore } from "~/store/ws-store";
import { useRouter } from "next/router";
import { api } from "~/utils/api";
import { setLocalstorageRoom } from "~/store/local-storage";

// const Home: NextPage = () => {
const MyNotSsrComponent = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  let roomName = useRouter().query.room;
  if (roomName == undefined) {
    throw new Error("no room name given");
  }
  if (Array.isArray(roomName)) {
    roomName = String(roomName[0]);
  }

  const setRoom = api.room.setRoom.useQuery({ roomName });
  setLocalstorageRoom(roomName);

  const messages = useWsStore((store) => store.messages);
  const presences = useWsStore((store) => store.presences);
  const presencesMap = useWsStore((store) => store.presencesMap);
  const isOnline = useWsStore((store) => store.ready);
  const actions = useWsStore((store) => store.actions);

  if (process.browser) {
    window.onbeforeunload = () => {
      actions.leaveChannel();
    };
  }

  // const [messages, setMessages] = useState([] as string[]);
  //
  // const [channel] = useChannel("test-ably", (message) => {
  //   setMessages([...messages, String(message.data.text)]);
  // });

  return (
    <>
      <Head>
        <title>Planning Poker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <Link href={"/"}>HOME</Link>
          <h1>Messages</h1>
          <p>{JSON.stringify(messages)}</p>
          <br />
          <h1>Presences</h1>
          <div>
            {presences.map((item) => (
              <div>{presencesMap.get(item)}</div>
            ))}
            {/*{*/}
            {/*  () => {for (const item of presences) {*/}
            {/*  <div key={key}>{value}</div>*/}
            {/*}}*/}
            {/*}*/}
            {/*{presences.forEach((value, key, map) => {*/}
            {/*  return <div key={key}>{value}</div>;*/}
            {/*})}*/}
          </div>
          {/*<Messages messages={messages} />*/}
          <button
            onClick={async () => {
              await actions.sendMessage();
            }}
          >
            SEND MESSAGE
          </button>
        </div>
      </main>
    </>
  );
};

// const MyNotSsrComponent = dynamic(() => , {
//   ssr: false,
// });

// export default function Home() {
//   return <MyNotSsrComponent />;
// }

export default dynamic(() => Promise.resolve(MyNotSsrComponent), {
  ssr: false,
});

// export default Home;

const Messages: React.FC<{ messages: string[] }> = ({ messages }) => {
  return (
    <div>
      {messages.map((item, index) => (
        <div key={index}>{item}</div>
      ))}
    </div>
  );
};
