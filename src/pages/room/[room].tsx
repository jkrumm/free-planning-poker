import Head from "next/head";
import React, { useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import { setLocalstorageRoom } from "~/store/local-storage";
import { configureAbly, useChannel, usePresence } from "@ably-labs/react-hooks";
import { v4 } from "uuid";
import { useWsStore } from "~/store/ws-store";
import { usePageStore } from "~/store/page-store";
import { Types } from "ably";
import { jsx } from "@emotion/react";
import { Button, Switch } from "@mantine/core";
import RealtimeChannelCallbacks = Types.RealtimeChannelCallbacks;
import IntrinsicAttributes = jsx.JSX.IntrinsicAttributes;

const fibonacci = [1, 2, 3, 5, 8, 13, 21, 34];

const Room = () => {
  configureAbly({
    authUrl: `${process.env.NEXT_PUBLIC_API_ROOT}api/ably-token`,
    clientId: v4(),
  });

  const router = useRouter();
  const room = router.query.room as string;

  // if (room || room !== "undefined") {
  //   api.room.setRoom.useQuery({ room });
  // }

  const messages = useWsStore((store) => store.messages);
  const addMessage = useWsStore((store) => store.addMessage);
  const votes = useWsStore((store) => store.votes);
  const myVote = useWsStore((store) => store.myVote);
  const setVote = useWsStore((store) => store.setVote);
  const presences = useWsStore((store) => store.presences);
  const presencesMap = useWsStore((store) => store.presencesMap);
  const updatePresences = useWsStore((store) => store.updatePresences);

  const username = usePageStore((store) => store.username);

  useEffect(() => {
    // if (!room || room === "undefined") {
    //   setLocalstorageRoom(null);
    //   router.push(`/`);
    //   return;
    // }
    // setLocalstorageRoom(room);
  }, []);

  const [channel] = useChannel("your-channel-name", (message) => {
    console.log("RECEIVED MESSAGE", message);
    switch (message.name) {
      case "test-message":
        addMessage(message.data.text);
        break;
      // case "voting":
      //   addVoting(message.data.number);
    }
  });

  channel.presence.get((err, presenceUpdates) => {
    if (!presenceUpdates?.length) {
      return;
    }
    console.log("FETCHED PRESENCE", presenceUpdates);
    presenceUpdates.forEach((presenceUpdate) => {
      updatePresences(presenceUpdate);
    });
  });

  const [_, updateStatus] = usePresence(
    "your-channel-name",
    { username },
    (presenceUpdate) => {
      console.log("RECEIVED PRESENCE", presenceUpdate);
      updatePresences(presenceUpdate);
    }
  );

  if (process.browser) {
    window.onbeforeunload = async () => {
      console.log("LEFT CHANNEL");
      await channel.presence.leave();
    };
  }

  return (
    <>
      <Head>
        <title>Planning Poker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex max-h-screen min-h-screen max-w-[100vw] flex-col items-center justify-center overscroll-none">
        <Link href={"/"}>HOME</Link>
        <Table />
        <div className="voting-bar">
          <Button.Group>
            {fibonacci.map((number) => (
              <Button
                variant={myVote === number ? "filled" : "default"}
                size={"lg"}
                key={number}
                onClick={async () => {
                  if (!channel) return;
                  setVote(number);
                  channel.presence.update({ username, voting: number });
                }}
              >
                {number}
              </Button>
            ))}
          </Button.Group>
        </div>
        <div className="settings-bar">
          <div>
            <h2 className="uppercase">{room}</h2>
          </div>
          <Switch label="Auto Show" />
          <Button
            variant={"default"}
            onClick={async () => {
              setLocalstorageRoom(null);
              await router.push(`/`);
            }}
          >
            Leave Room
          </Button>
        </div>
        {/*<h1>Messages</h1>*/}
        {/*<p>{JSON.stringify(messages)}</p>*/}
        {/*<br />*/}
        {/*<h1>Presences</h1>*/}
        {/*<div>*/}
        {/*  {presences.map((item) => (*/}
        {/*    <div key={`clientId-${item}`}>{presencesMap.get(item)}</div>*/}
        {/*  ))}*/}
        {/*</div>*/}
        {/*<h1>Votes</h1>*/}
        {/*<div>*/}
        {/*  {votes.map((item) => (*/}
        {/*    <div key={`clientId-${item}`}>*/}
        {/*      {presencesMap.get(item.clientId)} {item.number}*/}
        {/*    </div>*/}
        {/*  ))}*/}
        {/*</div>*/}
        {/*<Messages messages={messages} />*/}
        {/*<button*/}
        {/*  onClick={async () => {*/}
        {/*    channel.presence.update({ username, voting: 3 });*/}
        {/*  }}*/}
        {/*>*/}
        {/*  3*/}
        {/*</button>*/}
        {/*<button*/}
        {/*  onClick={async () => {*/}
        {/*    channel.presence.update({ username, voting: 5 });*/}
        {/*  }}*/}
        {/*>*/}
        {/*  5*/}
        {/*</button>*/}
        {/*<button*/}
        {/*  onClick={async () => {*/}
        {/*    channel.presence.update({ username, voting: 8 });*/}
        {/*  }}*/}
        {/*>*/}
        {/*  8*/}
        {/*</button>*/}
        {/*<button*/}
        {/*  onClick={async () => {*/}
        {/*    channel.publish("test-message", { text: username });*/}
        {/*  }}*/}
        {/*>*/}
        {/*  SEND MESSAGE*/}
        {/*</button>*/}

        {/*<button*/}
        {/*  onClick={async () => {*/}
        {/*    setLocalstorageRoom(null);*/}
        {/*    await router.push(`/`);*/}
        {/*  }}*/}
        {/*>*/}
        {/*  LEAVE ROOM*/}
        {/*</button>*/}
      </main>
    </>
  );
};

const VotingBar = (
  channel: IntrinsicAttributes & RealtimeChannelCallbacks,
  username: string
) => {
  const fibonacci = [1, 2, 3, 5, 8, 13, 21, 34];
  return (
    <div className="fixed bottom-2 flex w-full flex-col items-center justify-center">
      {fibonacci.map((number) => (
        <button
          key={number}
          onClick={async () => {
            if (!channel) return;
            channel.presence.update({ username, voting: number });
          }}
        >
          {number}
        </button>
      ))}
    </div>
  );
};

export default Room;

const Messages: React.FC<{ messages: string[] }> = ({ messages }) => {
  return (
    <div>
      {messages.map((item, index) => (
        <div key={index}>{item}</div>
      ))}
    </div>
  );
};

const Table = () => {
  const players = [
    { name: "Johannes", card: "1", status: "voted" },
    { name: "Jasmin", card: "9", status: "suspect" },
    { name: "Niklas", card: "13", status: "pending" },
    { name: "Laura", card: "31", status: "pending" },
    { name: "Dennis", card: "51", status: "voted" },
    { name: "Stephen", card: "16", status: "pending" },
    { name: "John", card: "88", status: "voted" },
    { name: "Thomas", card: "12", status: "voted" },
  ];

  const flipped = true;

  let voting = [
    { number: 3, amount: 1 },
    { number: 5, amount: 1 },
    { number: 8, amount: 8 },
    { number: 13, amount: 1 },
  ];
  voting = voting.sort((a, b) => b.amount - a.amount).slice(0, 4);

  const average =
    Math.round(
      (voting.reduce((acc, item) => {
        return acc + item.number * item.amount;
      }, 0) /
        voting.reduce((acc, item) => acc + item.amount, 0)) *
        10
    ) / 10;

  return (
    <div className="table">
      <div className="card-place">
        {voting.map((item, index) => (
          <div className={`card-wrapper amount-${item.amount}`}>
            {(function () {
              const cards = [];
              for (let i = 0; i < item.amount; i++) {
                cards.push(<div className="card">{item.number}</div>);
              }
              return cards;
            })()}
          </div>
        ))}
        <div className="average">{average}</div>
      </div>

      <div className="players">
        {players.map(({ name, card, status }, index) => (
          <div key={index} className={`player player-${index + 1}`}>
            <div className={`avatar bg-gray-800 ${status}`} />
            <div className="name">
              {name} {index + 1}
            </div>

            <div className={`card ${flipped && "flipped"} ${status}`}>
              {card}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
